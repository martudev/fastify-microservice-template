---
include:
  - project: 'devgurus/development/templates/lint/markdown'
    ref: main
    file: 'template/.gitlab-ci-template.yml'
  - project: 'devgurus/development/templates/lint/yaml'
    ref: main
    file: 'template/.gitlab-ci-template.yml'
  - project: 'devgurus/development/templates/lint/node'
    ref: main
    file: 'template/.gitlab-ci-template.yml'
  - project: 'devgurus/development/templates/lint/openapi'
    ref: main
    file: 'template/.gitlab-ci-template.yml'
  - project: 'devgurus/development/templates/build/container'
    ref: main
    file: 'template/.gitlab-ci-template.yml'
  - project: 'devgurus/development/templates/audit/dependency-check'
    ref: main
    file: 'template/.gitlab-ci-template.yml'
  - project: 'devgurus/development/templates/audit/trivy-container-scanner'
    ref: main
    file: 'template/.gitlab-ci-template.yml'

stages:
  - lint
  - build
  - test
  - audit
  - deploy

variables:
  YAMLLINT_OPTS: "-c .yamllint-config.yaml -f colored"
  HELM_RESPOSITORY: "registry.gitlab.com/devgurus/development/templates/helm-microservice-chart"
  HELM_CHART_VERSION: "0.2.0"
  HELM_CHART_NAME: "helm-microservice-chart"
  HELM_PATH: "helm"
  HELM_RELEASE_NAME: ${CI_PROJECT_NAME}-v1
  HELM_EXPERIMENTAL_OCI: 1

openapi-lint:
  allow_failure: true

dependency-scan:
  allow_failure: true

container-scanning:
  allow_failure: true

develop:
  image: devth/helm:v$HELM_VERSION
  stage: deploy
  environment: develop
  variables:
    CLOUD_PROJECT_ID: $CLOUD_PROJECT_ID_DEV
    K8S_CLUSTER_NAME: $K8S_CLUSTER_NAME_DEV
    K8S_CLUSTER_LOCATION: $K8S_CLUSTER_LOCATION_DEV
    K8S_CLUSTER_NAMESPACE: $K8S_CLUSTER_NAMESPACE_DEV
    HELM_OPTS:
      --values helm/values-$CI_ENVIRONMENT_NAME.yaml
      --set-string image.repository=$CI_REGISTRY_IMAGE
      --set-string image.pullSecret.registry=$CI_REGISTRY
      --set-string image.pullSecret.username=$DEPLOY_TOKEN_USERNAME
      --set-string image.pullSecret.password=$DEPLOY_TOKEN_PASSWORD
      # Uncomment if we want jwt policy
      # --set-string jwt.issuer=${JWT_ISSUER_DEV}
      # --set-string jwt.jwksUri=https://www.googleapis.com/service_accounts/v1/jwk/${JWT_ISSUER_DEV}

  before_script:
    - gcloud auth activate-service-account --key-file=$CLOUD_SERVICE_KEY
    - gcloud container clusters get-credentials $K8S_CLUSTER_NAME
      --region $K8S_CLUSTER_LOCATION --project $CLOUD_PROJECT_ID
  script:
    - helm registry login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - helm pull oci://$HELM_RESPOSITORY --version $HELM_CHART_VERSION --untar -d $HELM_PATH
    - helm upgrade --install --wait --namespace $K8S_CLUSTER_NAMESPACE --timeout 5m
      --set-string image.tag=${CI_COMMIT_SHA:0:8} $HELM_OPTS $HELM_RELEASE_NAME $HELM_PATH/$HELM_CHART_NAME
  rules:
    - if: $CI_PROJECT_NAME == "fastify-microservice-template"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

staging:
  image: devth/helm:v$HELM_VERSION
  stage: deploy
  environment: staging
  variables:
    CLOUD_PROJECT_ID: $CLOUD_PROJECT_ID_STG
    K8S_CLUSTER_NAME: $K8S_CLUSTER_NAME_STG
    K8S_CLUSTER_LOCATION: $K8S_CLUSTER_LOCATION_STG
    K8S_CLUSTER_NAMESPACE: $K8S_CLUSTER_NAMESPACE_STG
    HELM_OPTS:
      --values helm/values-$CI_ENVIRONMENT_NAME.yaml
      --set-string image.repository=$CI_REGISTRY_IMAGE
      --set-string image.pullSecret.registry=$CI_REGISTRY
      --set-string image.pullSecret.username=$DEPLOY_TOKEN_USERNAME
      --set-string image.pullSecret.password=$DEPLOY_TOKEN_PASSWORD
      # Uncomment if we want jwt policy
      # --set-string jwt.issuer=${JWT_ISSUER_STG}
      # --set-string jwt.jwksUri=https://www.googleapis.com/service_accounts/v1/jwk/${JWT_ISSUER_STG}
  before_script:
    - gcloud auth activate-service-account --key-file=$CLOUD_SERVICE_KEY
    - gcloud container clusters get-credentials $K8S_CLUSTER_NAME
      --region $K8S_CLUSTER_LOCATION --project $CLOUD_PROJECT_ID
  script:
    - helm registry login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - helm pull oci://$HELM_RESPOSITORY --version $HELM_CHART_VERSION --untar -d $HELM_PATH
    - helm upgrade --install --wait --namespace $K8S_CLUSTER_NAMESPACE --timeout 5m
      --set-string image.tag=${CI_COMMIT_SHA:0:8} $HELM_OPTS $HELM_RELEASE_NAME $HELM_PATH/$HELM_CHART_NAME
  rules:
    # https://semver.org/spec/v2.0.0.html: tag release/v0.1.2
    - if: $CI_COMMIT_TAG =~ /^release\/v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/

production:
  image: devth/helm:v$HELM_VERSION
  stage: deploy
  environment: production
  variables:
    CLOUD_PROJECT_ID: $CLOUD_PROJECT_ID_PROD
    K8S_CLUSTER_NAME: $K8S_CLUSTER_NAME_PROD
    K8S_CLUSTER_LOCATION: $K8S_CLUSTER_LOCATION_PROD
    K8S_CLUSTER_NAMESPACE: $K8S_CLUSTER_NAMESPACE_PROD
    HELM_OPTS:
      --values helm/values-$CI_ENVIRONMENT_NAME.yaml
      --set-string image.repository=$CI_REGISTRY_IMAGE
      --set-string image.pullSecret.registry=$CI_REGISTRY
      --set-string image.pullSecret.username=$DEPLOY_TOKEN_USERNAME
      --set-string image.pullSecret.password=$DEPLOY_TOKEN_PASSWORD
      # Uncomment if we want jwt policy
      # --set-string jwt.issuer=${JWT_ISSUER_PROD}
      # --set-string jwt.jwksUri=https://www.googleapis.com/service_accounts/v1/jwk/${JWT_ISSUER_PROD}
  before_script:
    - gcloud auth activate-service-account --key-file=$CLOUD_SERVICE_KEY
    - gcloud container clusters get-credentials $K8S_CLUSTER_NAME
      --region $K8S_CLUSTER_LOCATION --project $CLOUD_PROJECT_ID
  script:
    - helm registry login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - helm pull oci://$HELM_RESPOSITORY --version $HELM_CHART_VERSION --untar -d $HELM_PATH
    - helm upgrade --install --wait --namespace $K8S_CLUSTER_NAMESPACE --timeout 5m
      --set-string image.tag=${CI_COMMIT_SHA:0:8} $HELM_OPTS $HELM_RELEASE_NAME $HELM_PATH/$HELM_CHART_NAME
  rules:
    # https://semver.org/spec/v2.0.0.html: tag stable/v0.1.2
    - if: $CI_COMMIT_TAG =~ /^stable\/v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
