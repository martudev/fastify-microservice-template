name: CD workflow

on:
  # Only run after the CI workflow finished.
  workflow_run:
    workflows: ["CI workflow"]
    branches: [main]
    types:
      - completed

env:
  NODE_VERSION: 14
  PACKAGES_PAT: ${{ secrets.PACKAGES_PAT }} # Personal Access Token to use packages from Github Registry

  # Cloud env variables
  CLOUD_PROJECT_ID: ${{ secrets.CLOUD_PROJECT_ID }}
  CLOUD_SERVICE_KEY: ${{ secrets.CLOUD_SERVICE_KEY }}
  CLOUD_SDK_VERSION: '319.0.0'
  K8S_CLUSTER_NAME: my-gke-cluster  # Change me!
  K8S_CLUSTER_LOCATION: us-central1   # Change me!
  K8S_CLUSTER_NAMESPACE: default    # Change me!

  # Azure
  AZURE_CREDENTIALS: '${{ secrets.AZURE_CREDENTIALS }}' # expected format https://github.com/Azure/aks-set-context/
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  ACR_SERVER: ${{ secrets.ACR_SERVER }}

  # Docker image variables
  COMMIT_SHA: ${{ github.sha }}
  IMAGE_REPOSITORY: gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ github.event.repository.name }} # by default the image name will be the repo name

  # Helm variables
  NAMESPACE: default # Change me if needed
  HELM_INSTALL_TIMEOUT: 5m
  HELM_VERSION: ${{ secrets.HELM_VERSION }}
  HELM_EXPERIMENTAL_OCI: 1
  COMMON_CHART_REPOSITORY: ghcr.io/devgurusio/common-chart
  COMMON_CHART_VERSION: 0.1.0
  COMMON_CHART_PATH: helm/common-chart
  HELM_RELEASE_NAME: ${{ github.event.repository.name }}  # by default release name will be the repo name

jobs:
  build-gcp:
    # Only run if CI Workflow finished successfully
    # TODO: Only run if GCP is enabled
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Setup gcloud environment
        uses: google-github-actions/setup-gcloud@master
        with:
          version: ${{ env.CLOUD_SDK_VERSION }}
          project_id: ${{ env.CLOUD_PROJECT_ID }}
          service_account_key: ${{ env.CLOUD_SERVICE_KEY }}
      - name: Setup GCR
        run: gcloud auth configure-docker
      - name: Build Image
        run: |
          docker build -t ${IMAGE_REPOSITORY}:${COMMIT_SHA} \
            --build-arg NODE_VERSION=$NODE_VERSION \
            --build-arg NPM_TOKEN=$PACKAGES_PAT .

      - name: Push Image
        run: docker push ${IMAGE_REPOSITORY}:${COMMIT_SHA}

  deploy-gcp:
    # Only run if CI Workflow finished successfully
    # TODO: Only run if GCP is enabled
    if: github.event.workflow_run.conclusion == 'success'
    needs: [build-gcp]
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: ${{ env.K8S_CLUSTER_NAME }}
          location: ${{ env.K8S_CLUSTER_LOCATION }}
          credentials: ${{ env.CLOUD_SERVICE_KEY }}
          project_id: ${{ env.CLOUD_PROJECT_ID }}
      - name: Setup Helm
        uses: azure/setup-helm@v1
        with:
          version: ${{ env.HELM_VERSION }}
      - name: Login to GitHub Container Registry (GHCR)
        run: |
          echo ${PACKAGES_PAT} | helm registry login ${{ env.COMMON_CHART_REPOSITORY }} --username ${{ github.repository_owner }} --password-stdin
      - name: Pull helm common-chart from GitHub Container Registry (GHCR)
        run: |
          helm chart pull $COMMON_CHART_REPOSITORY:$COMMON_CHART_VERSION
          helm chart export $COMMON_CHART_REPOSITORY:$COMMON_CHART_VERSION -d helm
      - name: Upgrade Helm Chart
        run: |
          helm upgrade --install --wait \
            --values helm/values-staging.yaml \
            --set-string image.repository=${IMAGE_REPOSITORY} \
            --set-string image.tag=${COMMIT_SHA} \
            --namespace ${NAMESPACE} \
            --timeout ${HELM_INSTALL_TIMEOUT} \
            ${HELM_RELEASE_NAME} \
            ${COMMON_CHART_PATH}

  build-azure:
    # Only run if CI Workflow finished successfully
    # TODO: Only run if Azure is enabled
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}
      - name: Build Image
        run: |
          docker build -t ${IMAGE_REPOSITORY}:${COMMIT_SHA} \
            --build-arg NODE_VERSION=$NODE_VERSION \
            --build-arg NPM_TOKEN=$PACKAGES_PAT .
      - name: Push Image
        run: |
          docker push ${IMAGE_REPOSITORY}:${COMMIT_SHA}

  deploy-azure:
    # Only run if CI Workflow finished successfully
    # TODO: Only run if Azure is enabled
    if: github.event.workflow_run.conclusion == 'success'
    needs: [build-azure]
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: '${{ env.AZURE_CREDENTIALS }}'
      - name: Setup AKS
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ env.AZURE_CREDENTIALS }}'
          resource-group: ${{ env.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}
      - name: Setup Helm
        uses: azure/setup-helm@v1
        with:
          version: ${{ env.HELM_VERSION }}
      # Uncomment this if you want to use AKS HTTP Application Routing
      # - name: Get AKS Ingress DNS
      #   run: |
      #     # Set AKS Ingress DNS variable for later uses
      #     aksIngressDns=$(az aks show --resource-group ${AKS_RESOURCE_GROUP} --name ${AKS_CLUSTER_NAME} --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)
      #     echo "AKS_INGRESS_DNS=${aksIngressDns}" >> $GITHUB_ENV
      - name: Login to GitHub Container Registry (GHCR)
        run: |
          echo ${PACKAGES_PAT} | helm registry login ${{ env.COMMON_CHART_REPOSITORY }} --username ${{ github.repository_owner }} --password-stdin
      - name: Pull helm common-chart from GitHub Container Registry (GHCR)
        run: |
          helm chart pull $COMMON_CHART_REPOSITORY:$COMMON_CHART_VERSION
          helm chart export $COMMON_CHART_REPOSITORY:$COMMON_CHART_VERSION -d helm
      - name: Upgrade Helm Chart
        run: |
          # Add --set-string ingress.azure.dns=${AKS_INGRESS_DNS} in case you want to use AKS HTTP Application Routing
          helm upgrade --install --wait \
            --values helm/values-staging.yaml \
            --set-string image.repository=${IMAGE_REPOSITORY} \
            --set-string image.tag=${COMMIT_SHA} \
            --namespace ${NAMESPACE} \
            --timeout ${HELM_INSTALL_TIMEOUT} \
            ${HELM_RELEASE_NAME} \
            ${COMMON_CHART_PATH}
